from fastapi import FastAPI
from fastapi.responses import HTMLResponse
from fastapi.responses import FileResponse
from fastapi.responses import JSONResponse
from fastapi import FastAPI, File, UploadFile
import androguard.core.bytecodes.apk as apk
import androguard.core.bytecodes.dvm as dvm
import androguard.core.analysis.analysis as analysis
import pandas as pd
import pickle
import tempfile
import os
import json
import jsonpickle
app = FastAPI()

ds = {}


def load_ds():
    global ds
    ds = pd.read_csv('drebin215dataset5560malware9476benign_modified.csv')


load_ds()


def get_app_information(app):
    package_name = app.get_package()
    app_name = app.get_app_name()
    version_name = app.get_androidversion_name()
    version_code = app.get_androidversion_code()
    print('got apk')
    info = {
        "Package Name:": package_name,
        "App Name:": app_name,
        "Version Name:": version_name,
        "Version Code:": version_code
    }
    return info


def get_app_features(app):
    global ds
    apk_all_features = {}

    def get_permission(app):
        prm = set()
        permissions = app.get_permissions()
        for perm in permissions:
            p = perm.split('.')
            prm.add(p[2])
            apk_all_features[p[2]] = 1
            print('Permissions :', p[2])
        return prm

    def get_intent(app):
        ints = set()
        manifest = app.get_android_manifest_xml()
        # # Get all the activities with their intent filters
        activities = manifest.findall(".//activity")

        # Iterate through activities to extract intent filters and actions

        for activity in activities:
            intent_filters = activity.findall(".//intent-filter")
            for intent_filter in intent_filters:
                actions = intent_filter.findall(".//action")
                for action in actions:
                    action_name = action.get(
                        "{http://schemas.android.com/apk/res/android}name")
                    print("Action:", action_name)
                    ints.add(action_name)
                    apk_all_features[action_name] = 1
        return ints

    def get_app_test_dataframe():
        apk_test_set = {}
        for col in ds.columns:
            if col == 'class':
                continue
            if col not in apk_all_features:
                apk_test_set[col] = [0]
            else:
                apk_test_set[col] = [1]

        return pd.DataFrame(apk_test_set)

    perms = get_permission(app)
    ints = get_intent(app)
    res = {"Permissions": perms, "Actions": ints,
           "feature": get_app_test_dataframe()}
    return res


def load_model():
    with open('drebin_dt_model_random0.pkl', 'rb')as file:
        drebin_model = pickle.load(file)
    return drebin_model


def predict(dataframe) -> str:
    model = load_model()
    res = model.predict(dataframe)[0]
    if res == 1:
        return "File is Benign"
    else:
        return "File is Malicious"


@app.get("/")
async def root():
    html_content = """
    <html>
    <head>
        <title>FastAPI H1 Example</title>
    </head>
    <body>
        <h1>Hello, FastAPI!</h1>
    </body>
    </html>
    """
    # return HTMLResponse(content=html_content)
    msg = "Hello world"
    print(JSONResponse(msg))
    return JSONResponse(msg)


@app.post('/upload')
async def upload(file: UploadFile):
    contents = await file.read()
    info = {}
    try:

        with tempfile.NamedTemporaryFile(delete=False) as temp_file:
            temp_file.write(contents)
            temp_file_path = temp_file.name
            a = apk.APK(temp_file_path)
            info['App metadata'] = get_app_information(a)
            app_features = get_app_features(a)
            info["Permission"] = app_features['Permissions']
            info["Actions"] = app_features['Actions']
            info['Result'] = predict(app_features['feature'])
            temp_file.close()
            os.remove(temp_file_path)

    except Exception as e:
        print(e)
        return HTMLResponse(content=f"An error occurred: {str(e)}")

    if not info:
        return "Error occured"

    return info


@app.get('/{file}')
async def upload(file: str):
    print('request...')
    with open(file, "rb") as file:
        file_contents = file.read()
    contents = file_contents
    info = {}
    try:

        with tempfile.NamedTemporaryFile(delete=False) as temp_file:
            temp_file.write(contents)
            temp_file_path = temp_file.name
            a = apk.APK(temp_file_path)
            info["App metadata"] = get_app_information(a)
            app_features = get_app_features(a)
            info["Permission"] = app_features['Permissions']
            info["Actions"] = app_features['Actions']
            info["Result"] = predict(app_features['feature'])
            temp_file.close()
            os.remove(temp_file_path)

    except Exception as e:
        print(e)
        return HTMLResponse(content=f"An error occurred: {str(e)}")

    if not info:
        return "Error occured"

    return info
